package lsd.v2.jdbc

import lsd.v2.RollbackException
import lsd.v2.api.*
import java.io.InputStream
import java.io.Reader
import java.lang.Exception
import java.math.BigDecimal
import java.net.URL
import java.sql.*
import java.sql.Date
import java.util.*
import kotlin.collections.ArrayList

class LSDPreparedStatement(private val lsdConnection: LSDConnection, private val backingStatement: PreparedStatement) : PreparedFutureStatement,
    PreparedStatement {
    private var future: Future<*>? = null
    private val parameters = ArrayList<Future<*>>()
    private var executed: Boolean = false
    private var hasResults = false
    private var then: Future<Unit>? = null

    override fun toString(): String {
        return backingStatement.toString()
    }

    override fun resolve(): Boolean {
        if (!executed && future != null) {
            for (f in parameters) {
                f.resolve()
            }

            future!!.resolve()
            executed = true

            if (hasOpenResultSet()) {
                hasResults = backingStatement.resultSet.next()
                if (!hasResults) backingStatement.resultSet.close()
            }

            then?.resolve()

            if (lsdConnection.hasRolledBack()) {
                throw RollbackException()
            }
        }

        return hasResults
    }

    override fun dispose() {
        if (hasOpenResultSet()) {
            resultSet.close()
        }
        then?.dispose()
        future = null
        parameters.clear()
        executed = false
        hasResults = false
        then = null
    }

    override fun addFutureBatch() {
        TODO("Not yet implemented")
    }

    override fun executeFutureBatch() {
        TODO("Not yet implemented")
    }

    private fun hasOpenResultSet(): Boolean {
        return backingStatement.resultSet != null && !backingStatement.resultSet?.isClosed!!
    }

    override fun executeQuery(): ResultSet {
        return backingStatement.executeQuery()
    }

    override fun executeFutureQuery(): FutureResultSet {

        future = FutureRunner { backingStatement.executeQuery() }
        lsdConnection.addFutureStatement(this)

        return LSDResultSet(this)
    }

    override fun executeFutureUpdate() {
        future = FutureRunner { backingStatement.executeUpdate() }
        lsdConnection.addFutureStatement(this)
    }

    override fun then(future: () -> Unit) {
        then = FutureRunner { future.invoke() }
    }

    override fun abort(exception: Exception) {
        throw exception
    }

    private fun addFuture(f: () -> Unit) {
        parameters.add(FutureRunner(f))
    }

    override fun setFutureInt(parameterIndex: Int, x: Future<Int>) {
        addFuture { backingStatement.setInt(parameterIndex, x.resolve()) }
    }

    override fun setFutureDouble(parameterIndex: Int, x: Future<Double>) {
        addFuture { backingStatement.setDouble(parameterIndex, x.resolve()) }
    }

    override fun setFutureFloat(parameterIndex: Int, x: Future<Float>) {
        addFuture { backingStatement.setFloat(parameterIndex, x.resolve()) }
    }

    override fun setFutureString(parameterIndex: Int, x: Future<String>) {
        addFuture { backingStatement.setString(parameterIndex, x.resolve()) }
    }

    override fun <T : Any?> unwrap(iface: Class<T>?): T {
        TODO("Not yet implemented")
    }

    override fun isWrapperFor(iface: Class<*>?): Boolean {
        TODO("Not yet implemented")
    }

    override fun close() {
        backingStatement.close()
    }

    override fun executeQuery(sql: String?): ResultSet {
        return backingStatement.executeQuery(sql)
    }

    override fun executeUpdate(): Int {
        return backingStatement.executeUpdate()
    }

    override fun executeUpdate(sql: String?): Int {
        return backingStatement.executeUpdate(sql)
    }

    override fun executeUpdate(sql: String?, autoGeneratedKeys: Int): Int {
        return backingStatement.executeUpdate(sql, autoGeneratedKeys)
    }

    override fun executeUpdate(sql: String?, columnIndexes: IntArray?): Int {
        return backingStatement.executeUpdate(sql, columnIndexes)
    }

    override fun executeUpdate(sql: String?, columnNames: Array<out String>?): Int {
        return backingStatement.executeUpdate(sql, columnNames)
    }

    override fun getMaxFieldSize(): Int {
        return backingStatement.maxFieldSize
    }

    override fun setMaxFieldSize(max: Int) {
        backingStatement.maxFieldSize = max
    }

    override fun getMaxRows(): Int {
        return backingStatement.maxRows
    }

    override fun setMaxRows(max: Int) {
        backingStatement.maxRows = maxRows
    }

    override fun setEscapeProcessing(enable: Boolean) {
        backingStatement.setEscapeProcessing(enable)
    }

    override fun getQueryTimeout(): Int {
        return backingStatement.queryTimeout
    }

    override fun setQueryTimeout(seconds: Int) {
        backingStatement.queryTimeout = seconds
    }

    override fun cancel() {
        backingStatement.cancel()
    }

    override fun getWarnings(): SQLWarning {
        return backingStatement.warnings
    }

    override fun clearWarnings() {
        backingStatement.clearWarnings()
    }

    override fun setCursorName(name: String?) {
        backingStatement.setCursorName(name)
    }

    override fun execute(): Boolean {
        return backingStatement.execute()
    }

    override fun execute(sql: String?): Boolean {
        return backingStatement.execute(sql)
    }

    override fun execute(sql: String?, autoGeneratedKeys: Int): Boolean {
        return backingStatement.execute(sql, autoGeneratedKeys)
    }

    override fun execute(sql: String?, columnIndexes: IntArray?): Boolean {
        return backingStatement.execute(sql, columnIndexes)
    }

    override fun execute(sql: String?, columnNames: Array<out String>?): Boolean {
        return backingStatement.execute(sql, columnNames)
    }

    override fun getResultSet(): ResultSet {
        return backingStatement.resultSet
    }

    override fun getUpdateCount(): Int {
        return backingStatement.updateCount
    }

    override fun getMoreResults(): Boolean {
        return backingStatement.moreResults
    }

    override fun getMoreResults(current: Int): Boolean {
        return backingStatement.moreResults
    }

    override fun setFetchDirection(direction: Int) {
        backingStatement.fetchDirection = direction
    }

    override fun getFetchDirection(): Int {
        return backingStatement.fetchDirection
    }

    override fun setFetchSize(rows: Int) {
        backingStatement.fetchDirection = rows
    }

    override fun getFetchSize(): Int {
        return backingStatement.fetchSize
    }

    override fun getResultSetConcurrency(): Int {
        return backingStatement.resultSetConcurrency
    }

    override fun getResultSetType(): Int {
        return backingStatement.resultSetType
    }

    override fun addBatch() {
        backingStatement.addBatch()
    }

    override fun addBatch(sql: String?) {
        backingStatement.addBatch(sql)
    }

    override fun clearBatch() {
        backingStatement.clearBatch()
    }

    override fun executeBatch(): IntArray {
        return backingStatement.executeBatch()
    }

    override fun getConnection(): Connection {
        return backingStatement.connection
    }

    override fun getGeneratedKeys(): ResultSet {
        return backingStatement.generatedKeys
    }

    override fun getResultSetHoldability(): Int {
        return backingStatement.resultSetHoldability
    }

    override fun isClosed(): Boolean {
        return backingStatement.isClosed
    }

    override fun setPoolable(poolable: Boolean) {
        backingStatement.isPoolable = poolable
    }

    override fun isPoolable(): Boolean {
        return backingStatement.isPoolable
    }

    override fun closeOnCompletion() {
        backingStatement.closeOnCompletion()
    }

    override fun isCloseOnCompletion(): Boolean {
        return backingStatement.isCloseOnCompletion
    }

    override fun setNull(parameterIndex: Int, sqlType: Int) {
        backingStatement.setNull(parameterIndex, sqlType)
    }

    override fun setNull(parameterIndex: Int, sqlType: Int, typeName: String?) {
        backingStatement.setNull(parameterIndex, sqlType, typeName)
    }

    override fun setBoolean(parameterIndex: Int, x: Boolean) {
        backingStatement.setBoolean(parameterIndex, x)
    }

    override fun setByte(parameterIndex: Int, x: Byte) {
        backingStatement.setByte(parameterIndex, x)
    }

    override fun setShort(parameterIndex: Int, x: Short) {
        backingStatement.setShort(parameterIndex, x)
    }

    override fun setObject(parameterIndex: Int, x: Any?, targetSqlType: Int) {
        backingStatement.setObject(parameterIndex, x, targetSqlType)
    }

    override fun setObject(parameterIndex: Int, x: Any?) {
        backingStatement.setObject(parameterIndex, x)
    }

    override fun setObject(parameterIndex: Int, x: Any?, targetSqlType: Int, scaleOrLength: Int) {
        backingStatement.setObject(parameterIndex, x, targetSqlType, scaleOrLength)
    }

    override fun setInt(parameterIndex: Int, x: Int) {
        backingStatement.setInt(parameterIndex, x)
    }

    override fun setLong(parameterIndex: Int, x: Long) {
        backingStatement.setLong(parameterIndex, x)
    }

    override fun setFloat(parameterIndex: Int, x: Float) {
        backingStatement.setFloat(parameterIndex, x)
    }

    override fun setDouble(parameterIndex: Int, x: Double) {
        backingStatement.setDouble(parameterIndex, x)
    }

    override fun setBigDecimal(parameterIndex: Int, x: BigDecimal?) {
        backingStatement.setBigDecimal(parameterIndex, x)
    }

    override fun setString(parameterIndex: Int, x: String?) {
        backingStatement.setString(parameterIndex, x)
    }

    override fun setBytes(parameterIndex: Int, x: ByteArray?) {
        backingStatement.setBytes(parameterIndex, x)
    }

    override fun setDate(parameterIndex: Int, x: Date?) {
        backingStatement.setDate(parameterIndex, x)
    }

    override fun setDate(parameterIndex: Int, x: Date?, cal: Calendar?) {
        backingStatement.setDate(parameterIndex, x, cal)
    }

    override fun setTime(parameterIndex: Int, x: Time?) {
        backingStatement.setTime(parameterIndex, x)
    }

    override fun setTime(parameterIndex: Int, x: Time?, cal: Calendar?) {
        backingStatement.setTime(parameterIndex, x, cal)
    }

    override fun setTimestamp(parameterIndex: Int, x: Timestamp?) {
        backingStatement.setTimestamp(parameterIndex, x)
    }

    override fun setTimestamp(parameterIndex: Int, x: Timestamp?, cal: Calendar?) {
        backingStatement.setTimestamp(parameterIndex, x, cal)
    }

    override fun setAsciiStream(parameterIndex: Int, x: InputStream?, length: Int) {
        backingStatement.setAsciiStream(parameterIndex, x, length)
    }

    override fun setAsciiStream(parameterIndex: Int, x: InputStream?, length: Long) {
        backingStatement.setAsciiStream(parameterIndex, x, length)
    }

    override fun setAsciiStream(parameterIndex: Int, x: InputStream?) {
        backingStatement.setAsciiStream(parameterIndex, x)
    }

    override fun setUnicodeStream(parameterIndex: Int, x: InputStream?, length: Int) {
        @Suppress("DEPRECATION")
        backingStatement.setUnicodeStream(parameterIndex, x, length)
    }

    override fun setBinaryStream(parameterIndex: Int, x: InputStream?, length: Int) {
        backingStatement.setBinaryStream(parameterIndex, x, length)
    }

    override fun setBinaryStream(parameterIndex: Int, x: InputStream?, length: Long) {
        backingStatement.setBinaryStream(parameterIndex, x, length)
    }

    override fun setBinaryStream(parameterIndex: Int, x: InputStream?) {
        backingStatement.setBinaryStream(parameterIndex, x)
    }

    override fun clearParameters() {
        backingStatement.clearParameters()
    }

    override fun setCharacterStream(parameterIndex: Int, reader: Reader?, length: Int) {
        backingStatement.setCharacterStream(parameterIndex, reader, length)
    }

    override fun setCharacterStream(parameterIndex: Int, reader: Reader?, length: Long) {
        backingStatement.setCharacterStream(parameterIndex, reader, length)
    }

    override fun setCharacterStream(parameterIndex: Int, reader: Reader?) {
        backingStatement.setCharacterStream(parameterIndex, reader)
    }

    override fun setRef(parameterIndex: Int, x: Ref?) {
        backingStatement.setRef(parameterIndex, x)
    }

    override fun setBlob(parameterIndex: Int, x: Blob?) {
        backingStatement.setBlob(parameterIndex, x)
    }

    override fun setBlob(parameterIndex: Int, inputStream: InputStream?, length: Long) {
        backingStatement.setBlob(parameterIndex, inputStream, length)
    }

    override fun setBlob(parameterIndex: Int, inputStream: InputStream?) {
        backingStatement.setBlob(parameterIndex, inputStream)
    }

    override fun setClob(parameterIndex: Int, x: Clob?) {
        backingStatement.setClob(parameterIndex, x)
    }

    override fun setClob(parameterIndex: Int, reader: Reader?, length: Long) {
        backingStatement.setClob(parameterIndex, reader, length)
    }

    override fun setClob(parameterIndex: Int, reader: Reader?) {
        backingStatement.setClob(parameterIndex, reader)
    }

    override fun setArray(parameterIndex: Int, x: java.sql.Array?) {
        backingStatement.setArray(parameterIndex, x)
    }

    override fun getMetaData(): ResultSetMetaData {
        return backingStatement.metaData
    }

    override fun setURL(parameterIndex: Int, x: URL?) {
        backingStatement.setURL(parameterIndex, x)
    }

    override fun getParameterMetaData(): ParameterMetaData {
        return backingStatement.parameterMetaData
    }

    override fun setRowId(parameterIndex: Int, x: RowId?) {
        backingStatement.setRowId(parameterIndex, x)
    }

    override fun setNString(parameterIndex: Int, value: String?) {
        backingStatement.setNString(parameterIndex, value)
    }

    override fun setNCharacterStream(parameterIndex: Int, value: Reader?, length: Long) {
        backingStatement.setNCharacterStream(parameterIndex, value, length)
    }

    override fun setNCharacterStream(parameterIndex: Int, value: Reader?) {
        backingStatement.setNCharacterStream(parameterIndex, value)
    }

    override fun setNClob(parameterIndex: Int, value: NClob?) {
        backingStatement.setNClob(parameterIndex, value)
    }

    override fun setNClob(parameterIndex: Int, reader: Reader?, length: Long) {
        backingStatement.setNClob(parameterIndex, reader, length)
    }

    override fun setNClob(parameterIndex: Int, reader: Reader?) {
        backingStatement.setNClob(parameterIndex, reader)
    }

    override fun setSQLXML(parameterIndex: Int, xmlObject: SQLXML?) {
        backingStatement.setSQLXML(parameterIndex, xmlObject)
    }
}