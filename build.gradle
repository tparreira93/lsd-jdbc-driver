plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
    id 'maven-publish'
}

apply plugin: 'maven-publish'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    testImplementation 'org.postgresql:postgresql:42.2.16'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

def getVersion(version) {
    def currentRevision = "git rev-parse HEAD".execute().text
    def branch = "git branch -r --contains $currentRevision".execute().text
    def dVersion = (branch.contains("origin/master")) ? version : currentRevision.trim()
    return dVersion
}

scmVersion {
    tag {
        prefix = project.name + "-"
    }
    versionIncrementer 'incrementMinor'
    versionCreator { version, position -> getVersion(version) }
    hooks {
        post { context ->
            project.version = getVersion(context.currentVersion)
        }
    }
    repository {
        pushTagsOnly = true
    }
    checks {
        uncommittedChanges = false
        aheadOfRemote = false
        snapshotDependencies = true
    }
}

project.version = scmVersion.version

test {
    useJUnitPlatform()

    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'trxsys'
            artifactId = 'lsd.v2'
            version = scmVersion.version

            from components.kotlin
        }
    }
}


jar {
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

task copyJar {
    dependsOn jar
    doLast {
        copy {
            from 'build/libs'
            into "C:\\Workspace\\thesis\\code\\benchmarksql_lsd_v2\\libs"
        }
    }
}